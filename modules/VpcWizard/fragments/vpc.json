{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "VPC Wizard template",
    "Parameters": {
        "CidrBlock": {
            "Default": "10.0.0.0/16",
            "Description": "VPC CIDR Block (eg 10.0.0.0/16) - Must be a /16",
            "Type": "String"
        },
        "NumberOfAZs": {
            "Type": "Number",
            "Default": 3,
            "Description": "How many Availability Zones do you wish to utilize (1-3) ?"
        },
        "PrivateOutboundConnectivity": {
            "Type": "String",
            "Default": true,
            "Description": "Do you want to provide outbound connectivity to your private subnets?"
        },
        "VpcFlowLogDestination": {
            "Type": "String",
            "Default": "CloudWatchLogs",
            "Description": "Where do you want to ship your VPC Flow Logs (None/CloudWatchLogs/S3) ?"
        },
        "TransitGatewayId": {
            "Type": "String",
            "Default": "None",
            "Description": "Create TGW attachment for this VPC"
        },
        "EnablePrivateSessionManager": {
            "Type": "String",
            "Default": true,
            "Description": "Do you want to enable private access to your instances via SSM Session Manager via VPC Endpoints?"
        }
    },
    "Conditions": {
        "BuildB": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "NumberOfAZs"
                        },
                        1
                    ]
                }
            ]
        },
        "BuildC": {
            "Fn::Equals": [
                {
                    "Ref": "NumberOfAZs"
                },
                3
            ]
        },
        "EnablePrivateSessionManager": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "EnablePrivateSessionManager"
                        },
                        "True"
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "EnablePrivateSessionManager"
                        },
                        "true"
                    ]
                }
            ]
        },
        "PrivateOutboundA": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "PrivateOutboundConnectivity"
                        },
                        "True"
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "PrivateOutboundConnectivity"
                        },
                        "true"
                    ]
                }
            ]
        },
        "PrivateOutboundB": {
            "Fn::And": [
                {
                    "Condition": "PrivateOutboundA"
                },
                {
                    "Condition": "BuildB"
                }
            ]
        },
        "PrivateOutboundC": {
            "Fn::And": [
                {
                    "Condition": "PrivateOutboundB"
                },
                {
                    "Condition": "BuildC"
                }
            ]
        },
        "VpcFlowLogsDestinationCloudWatchLogs": {
            "Fn::Equals": [
                {
                    "Ref": "VpcFlowLogDestination"
                },
                "CloudWatchLogs"
            ]
        },
        "VpcFlowLogsDestinationS3": {
            "Fn::Equals": [
                {
                    "Ref": "VpcFlowLogDestination"
                },
                "S3"
            ]
        },
        "CreateTgwAttachment": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "TransitGatewayId"
                        },
                        "None"
                    ]
                }
            ]
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "CidrBlock": {
                    "Ref": "CidrBlock"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-vpc"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "VpcIPv6Cidr": {
            "Type": "AWS::EC2::VPCCidrBlock",
            "Properties": {
                "AmazonProvidedIpv6CidrBlock": true,
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-igw"
                        }
                    }
                ]
            }
        },
        "VpcIgwAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "EgressOnlyInternetGateway": {
            "Type": "AWS::EC2::EgressOnlyInternetGateway",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicSubnetA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::Cidr": [
                                {
                                    "Ref": "CidrBlock"
                                },
                                255,
                                8
                            ]
                        }
                    ]
                },
                "MapPublicIpOnLaunch": true,
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/public-subnet-a"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "PublicSubnetB": {
            "Type": "AWS::EC2::Subnet",
            "Condition": "BuildB",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::Cidr": [
                                {
                                    "Ref": "CidrBlock"
                                },
                                255,
                                8
                            ]
                        }
                    ]
                },
                "MapPublicIpOnLaunch": true,
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/public-subnet-b"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "PublicSubnetC": {
            "Type": "AWS::EC2::Subnet",
            "Condition": "BuildC",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        2,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Fn::Select": [
                        2,
                        {
                            "Fn::Cidr": [
                                {
                                    "Ref": "CidrBlock"
                                },
                                255,
                                8
                            ]
                        }
                    ]
                },
                "MapPublicIpOnLaunch": true,
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/public-subnet-c"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "PrivateSubnetA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Fn::Select": [
                        64,
                        {
                            "Fn::Cidr": [
                                {
                                    "Ref": "CidrBlock"
                                },
                                255,
                                8
                            ]
                        }
                    ]
                },
                "MapPublicIpOnLaunch": false,
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/private-subnet-a"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "PrivateSubnetB": {
            "Type": "AWS::EC2::Subnet",
            "Condition": "BuildB",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Fn::Select": [
                        65,
                        {
                            "Fn::Cidr": [
                                {
                                    "Ref": "CidrBlock"
                                },
                                255,
                                8
                            ]
                        }
                    ]
                },
                "MapPublicIpOnLaunch": false,
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/private-subnet-b"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "PrivateSubnetC": {
            "Type": "AWS::EC2::Subnet",
            "Condition": "BuildC",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        2,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Fn::Select": [
                        66,
                        {
                            "Fn::Cidr": [
                                {
                                    "Ref": "CidrBlock"
                                },
                                255,
                                8
                            ]
                        }
                    ]
                },
                "MapPublicIpOnLaunch": false,
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/private-subnet-c"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "IsolatedSubnetA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Fn::Select": [
                        128,
                        {
                            "Fn::Cidr": [
                                {
                                    "Ref": "CidrBlock"
                                },
                                255,
                                8
                            ]
                        }
                    ]
                },
                "MapPublicIpOnLaunch": false,
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/isolated-subnet-a"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "IsolatedSubnetB": {
            "Type": "AWS::EC2::Subnet",
            "Condition": "BuildB",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Fn::Select": [
                        129,
                        {
                            "Fn::Cidr": [
                                {
                                    "Ref": "CidrBlock"
                                },
                                255,
                                8
                            ]
                        }
                    ]
                },
                "MapPublicIpOnLaunch": false,
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/isolated-subnet-b"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "IsolatedSubnetC": {
            "Type": "AWS::EC2::Subnet",
            "Condition": "BuildC",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        2,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Fn::Select": [
                        130,
                        {
                            "Fn::Cidr": [
                                {
                                    "Ref": "CidrBlock"
                                },
                                255,
                                8
                            ]
                        }
                    ]
                },
                "MapPublicIpOnLaunch": false,
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/isolated-subnet-c"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "TransitGatewayAttachment": {
            "Type": "AWS::EC2::TransitGatewayAttachment",
            "Condition": "CreateTgwAttachment",
            "Properties": {
                "SubnetIds": {
                    "Fn::If": [
                        "BuildC",
                        [
                            {
                                "Ref": "IsolatedSubnetA"
                            },
                            {
                                "Ref": "IsolatedSubnetB"
                            },
                            {
                                "Ref": "IsolatedSubnetC"
                            }
                        ],
                        {
                            "Fn::If": [
                                "BuildB",
                                [
                                    {
                                        "Ref": "IsolatedSubnetA"
                                    },
                                    {
                                        "Ref": "IsolatedSubnetB"
                                    }
                                ],
                                [
                                    {
                                        "Ref": "IsolatedSubnetA"
                                    }
                                ]
                            ]
                        }
                    ]
                },
                "TransitGatewayId": {
                    "Ref": "TransitGatewayId"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/public-route-table"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "PrivateRouteTableA": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/private-route-table-a"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "PrivateRouteTableB": {
            "Type": "AWS::EC2::RouteTable",
            "Condition": "BuildB",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/private-route-table-b"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "PrivateRouteTableC": {
            "Type": "AWS::EC2::RouteTable",
            "Condition": "BuildC",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/private-route-table-c"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "IsolatedRouteTableA": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/isolated-route-table-a"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "IsolatedRouteTableB": {
            "Type": "AWS::EC2::RouteTable",
            "Condition": "BuildB",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/isolated-route-table-b"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "IsolatedRouteTableC": {
            "Type": "AWS::EC2::RouteTable",
            "Condition": "BuildC",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/isolated-route-table-c"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "PublicRouteTableAssociationA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetA"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PublicRouteTableAssociationB": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Condition": "BuildB",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetB"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PublicRouteTableAssociationC": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Condition": "BuildC",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetC"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PrivateRouteTableAssociationA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnetA"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTableA"
                }
            }
        },
        "PrivateRouteTableAssociationB": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Condition": "BuildB",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnetB"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTableB"
                }
            }
        },
        "PrivateRouteTableAssociationC": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Condition": "BuildC",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnetC"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTableC"
                }
            }
        },
        "IsolatedRouteTableAssociationA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "IsolatedSubnetA"
                },
                "RouteTableId": {
                    "Ref": "IsolatedRouteTableA"
                }
            }
        },
        "IsolatedRouteTableAssociationB": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Condition": "BuildB",
            "Properties": {
                "SubnetId": {
                    "Ref": "IsolatedSubnetB"
                },
                "RouteTableId": {
                    "Ref": "IsolatedRouteTableB"
                }
            }
        },
        "IsolatedRouteTableAssociationC": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Condition": "BuildC",
            "Properties": {
                "SubnetId": {
                    "Ref": "IsolatedSubnetC"
                },
                "RouteTableId": {
                    "Ref": "IsolatedRouteTableC"
                }
            }
        },
        "PublicRouteToIgwIpv4": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicRouteToIgwIpv6": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationIpv6CidrBlock": "::/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "ElasticIpNatGatewayA": {
            "Type": "AWS::EC2::EIP",
            "Condition": "PrivateOutboundA",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-eip-nat-gateway-a"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "NatGatewayA": {
            "Type": "AWS::EC2::NatGateway",
            "Condition": "PrivateOutboundA",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "ElasticIpNatGatewayA",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnetA"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/nat-gateway-a"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "PrivateRouteToNatGatewayAIpv4": {
            "Type": "AWS::EC2::Route",
            "Condition": "PrivateOutboundA",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTableA"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NatGatewayA"
                }
            }
        },
        "PrivateRouteToNatGatewayAIpv6": {
            "Type": "AWS::EC2::Route",
            "Condition": "PrivateOutboundA",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTableA"
                },
                "DestinationIpv6CidrBlock": "::/0",
                "EgressOnlyInternetGatewayId": {
                    "Ref": "EgressOnlyInternetGateway"
                }
            }
        },
        "ElasticIpNatGatewayB": {
            "Type": "AWS::EC2::EIP",
            "Condition": "PrivateOutboundB",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-eip-nat-gateway-b"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "NatGatewayB": {
            "Type": "AWS::EC2::NatGateway",
            "Condition": "PrivateOutboundB",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "ElasticIpNatGatewayB",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnetB"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/nat-gateway-b"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "PrivateRouteToNatGatewayB": {
            "Type": "AWS::EC2::Route",
            "Condition": "PrivateOutboundB",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTableB"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NatGatewayB"
                }
            }
        },
        "PrivateRouteToNatGatewayBIpv6": {
            "Type": "AWS::EC2::Route",
            "Condition": "PrivateOutboundB",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTableB"
                },
                "DestinationIpv6CidrBlock": "::/0",
                "EgressOnlyInternetGatewayId": {
                    "Ref": "EgressOnlyInternetGateway"
                }
            }
        },
        "ElasticIpNatGatewayC": {
            "Type": "AWS::EC2::EIP",
            "Condition": "PrivateOutboundC",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-eip-nat-gateway-c"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "NatGatewayC": {
            "Type": "AWS::EC2::NatGateway",
            "Condition": "PrivateOutboundC",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "ElasticIpNatGatewayC",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnetC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/nat-gateway-c"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "PrivateRouteToNatGatewayC": {
            "Type": "AWS::EC2::Route",
            "Condition": "PrivateOutboundC",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTableC"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NatGatewayC"
                }
            }
        },
        "PrivateRouteToNatGatewayCIpv6": {
            "Type": "AWS::EC2::Route",
            "Condition": "PrivateOutboundC",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTableC"
                },
                "DestinationIpv6CidrBlock": "::/0",
                "EgressOnlyInternetGatewayId": {
                    "Ref": "EgressOnlyInternetGateway"
                }
            }
        },
        "VpcFlowLogsCwLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Condition": "VpcFlowLogsDestinationCloudWatchLogs",
            "Properties": {
                "LogGroupName": {
                    "Fn::Sub": "${AWS::StackName}/vpc-flow-logs-group"
                },
                "RetentionInDays": 30
            }
        },
        "VpcFlowLogsCloudwatchPolicy": {
            "Condition": "VpcFlowLogsDestinationCloudWatchLogs",
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "VpcFlowLogsCloudwatchPolicy",
                "Roles": [
                    {
                        "Ref": "VpcFlowLogsCloudwatchRole"
                    }
                ],
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "logs:DescribeLogGroups",
                                "logs:DescribeLogStreams"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "VpcFlowLogsCwLogGroup",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                }
            }
        },
        "VpcFlowLogsCloudwatchRole": {
            "Type": "AWS::IAM::Role",
            "Condition": "VpcFlowLogsDestinationCloudWatchLogs",
            "Properties": {
                "RoleName": {
                    "Fn::Sub": "${AWS::StackName}-vpcflowlogs-cw-role"
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "vpc-flow-logs.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "VpcFlowLogsCloudWatchLogs": {
            "Type": "AWS::EC2::FlowLog",
            "Condition": "VpcFlowLogsDestinationCloudWatchLogs",
            "Properties": {
                "DeliverLogsPermissionArn": {
                    "Fn::GetAtt": [
                        "VpcFlowLogsCloudwatchRole",
                        "Arn"
                    ]
                },
                "LogDestination": {
                    "Fn::GetAtt": [
                        "VpcFlowLogsCwLogGroup",
                        "Arn"
                    ]
                },
                "LogDestinationType": "cloud-watch-logs",
                "MaxAggregationInterval": 60,
                "ResourceId": {
                    "Ref": "VPC"
                },
                "ResourceType": "VPC",
                "TrafficType": "ALL",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/vpc-flow-logs"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "VpcFlowLogKmsKey": {
            "Type": "AWS::KMS::Key",
            "Condition": "VpcFlowLogsDestinationS3",
            "Properties": {
                "KeyPolicy": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "Key Management",
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:root"
                                }
                            },
                            "Action": "kms:*",
                            "Resource": "*"
                        },
                        {
                            "Sid": "Allow VPC Flow Logs to use the key",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "delivery.logs.amazonaws.com"
                            },
                            "Action": [
                                "kms:ReEncrypt",
                                "kms:GenerateDataKey",
                                "kms:Encrypt",
                                "kms:DescribeKey",
                                "kms:Decrypt"
                            ],
                            "Resource": "*"
                        }
                    ]
                }
            }
        },
        "VpcFlowLogsBucket": {
            "Type": "AWS::S3::Bucket",
            "Condition": "VpcFlowLogsDestinationS3",
            "DeletionPolicy": "Retain",
            "Properties": {
                "BucketEncryption": {
                    "ServerSideEncryptionConfiguration": [
                        {
                            "ServerSideEncryptionByDefault": {
                                "SSEAlgorithm": "aws:kms",
                                "KMSMasterKeyID": {
                                    "Fn::GetAtt": [
                                        "VpcFlowLogKmsKey",
                                        "Arn"
                                    ]
                                }
                            }
                        }
                    ]
                },
                "BucketName": {
                    "Fn::Sub": "${AWS::StackName}-vpc-flowlogs"
                },
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            }
        },
        "LogBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Condition": "VpcFlowLogsDestinationS3",
            "Properties": {
                "Bucket": {
                    "Ref": "VpcFlowLogsBucket"
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "AWSLogDeliveryWrite",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "delivery.logs.amazonaws.com"
                            },
                            "Action": "s3:PutObject",
                            "Resource": {
                                "Fn::Sub": "${VpcFlowLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
                            },
                            "Condition": {
                                "StringEquals": {
                                    "s3:x-amz-acl": "bucket-owner-full-control"
                                }
                            }
                        },
                        {
                            "Sid": "AWSLogDeliveryAclCheck",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "delivery.logs.amazonaws.com"
                            },
                            "Action": "s3:GetBucketAcl",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "VpcFlowLogsBucket",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                }
            }
        },
        "VpcFlowLogsS3": {
            "Type": "AWS::EC2::FlowLog",
            "Condition": "VpcFlowLogsDestinationS3",
            "Properties": {
                "LogDestinationType": "s3",
                "LogDestination": {
                    "Fn::GetAtt": [
                        "VpcFlowLogsBucket",
                        "Arn"
                    ]
                },
                "MaxAggregationInterval": 60,
                "ResourceId": {
                    "Ref": "VPC"
                },
                "ResourceType": "VPC",
                "TrafficType": "ALL",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}/vpc-flow-logs"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "SsmSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Condition": "EnablePrivateSessionManager",
            "Properties": {
                "GroupName": {
                    "Fn::Sub": "${AWS::StackName}/ssm-endpoint-sg"
                },
                "GroupDescription": "Allow inbound HTTPs from VPC to SSM VPC Endpoint",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "CidrBlock"
                        },
                        "IpProtocol": "tcp",
                        "FromPort": 443,
                        "ToPort": 443
                    }
                ],
                "Tags": [
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "SsmMessagesSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Condition": "EnablePrivateSessionManager",
            "Properties": {
                "GroupName": {
                    "Fn::Sub": "${AWS::StackName}/ssm-messages-endpoint-sg"
                },
                "GroupDescription": "Allow inbound HTTPs from VPC to SSM Messages VPC Endpoint",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "CidrBlock"
                        },
                        "IpProtocol": "tcp",
                        "FromPort": 443,
                        "ToPort": 443
                    }
                ],
                "Tags": [
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "Ec2MessagesSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Condition": "EnablePrivateSessionManager",
            "Properties": {
                "GroupName": {
                    "Fn::Sub": "${AWS::StackName}/ec2-messages-endpoint-sg"
                },
                "GroupDescription": "Allow inbound HTTPs from VPC to EC2 Messages VPC Endpoint",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "CidrBlock"
                        },
                        "IpProtocol": "tcp",
                        "FromPort": 443,
                        "ToPort": 443
                    }
                ],
                "Tags": [
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "SsmEndpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Condition": "EnablePrivateSessionManager",
            "Properties": {
                "PrivateDnsEnabled": true,
                "VpcEndpointType": "Interface",
                "SecurityGroupIds": [
                    {
                        "Ref": "SsmSecurityGroup"
                    }
                ],
                "ServiceName": {
                    "Fn::Sub": "com.amazonaws.${AWS::Region}.ssm"
                },
                "SubnetIds": {
                    "Fn::If": [
                        "BuildC",
                        [
                            {
                                "Ref": "IsolatedSubnetA"
                            },
                            {
                                "Ref": "IsolatedSubnetB"
                            },
                            {
                                "Ref": "IsolatedSubnetC"
                            }
                        ],
                        {
                            "Fn::If": [
                                "BuildB",
                                [
                                    {
                                        "Ref": "IsolatedSubnetA"
                                    },
                                    {
                                        "Ref": "IsolatedSubnetB"
                                    }
                                ],
                                [
                                    {
                                        "Ref": "IsolatedSubnetA"
                                    }
                                ]
                            ]
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "SsmMessagesEndpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Condition": "EnablePrivateSessionManager",
            "Properties": {
                "PrivateDnsEnabled": true,
                "VpcEndpointType": "Interface",
                "SecurityGroupIds": [
                    {
                        "Ref": "SsmMessagesSecurityGroup"
                    }
                ],
                "ServiceName": {
                    "Fn::Sub": "com.amazonaws.${AWS::Region}.ssmmessages"
                },
                "SubnetIds": {
                    "Fn::If": [
                        "BuildC",
                        [
                            {
                                "Ref": "IsolatedSubnetA"
                            },
                            {
                                "Ref": "IsolatedSubnetB"
                            },
                            {
                                "Ref": "IsolatedSubnetC"
                            }
                        ],
                        {
                            "Fn::If": [
                                "BuildB",
                                [
                                    {
                                        "Ref": "IsolatedSubnetA"
                                    },
                                    {
                                        "Ref": "IsolatedSubnetB"
                                    }
                                ],
                                [
                                    {
                                        "Ref": "IsolatedSubnetA"
                                    }
                                ]
                            ]
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "Ec2MessagesEndpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Condition": "EnablePrivateSessionManager",
            "Properties": {
                "PrivateDnsEnabled": true,
                "VpcEndpointType": "Interface",
                "SecurityGroupIds": [
                    {
                        "Ref": "Ec2MessagesSecurityGroup"
                    }
                ],
                "ServiceName": {
                    "Fn::Sub": "com.amazonaws.${AWS::Region}.ec2messages"
                },
                "SubnetIds": {
                    "Fn::If": [
                        "BuildC",
                        [
                            {
                                "Ref": "IsolatedSubnetA"
                            },
                            {
                                "Ref": "IsolatedSubnetB"
                            },
                            {
                                "Ref": "IsolatedSubnetC"
                            }
                        ],
                        {
                            "Fn::If": [
                                "BuildB",
                                [
                                    {
                                        "Ref": "IsolatedSubnetA"
                                    },
                                    {
                                        "Ref": "IsolatedSubnetB"
                                    }
                                ],
                                [
                                    {
                                        "Ref": "IsolatedSubnetA"
                                    }
                                ]
                            ]
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "SessionManagerInstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
                ],
                "Path": "/",
                "Tags": [
                    {
                        "Key": "Stack",
                        "Value": {
                            "Fn::Sub": "${AWS::StackId}"
                        }
                    }
                ]
            }
        },
        "SessionManagerInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "InstanceProfileName": {
                    "Fn::Sub": "${AWS::StackName}-ssm-instance-profile"
                },
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "SessionManagerInstanceRole"
                    }
                ]
            }
        }
    },
    "Outputs": {
        "VpcId": {
            "Value": {
                "Ref": "VPC"
            }
        },
        "IsolatedSubnets": {
            "Value": {
                "Fn::Join": [
                    ",",
                    {
                        "Fn::If": [
                            "BuildC",
                            [
                                {
                                    "Ref": "IsolatedSubnetA"
                                },
                                {
                                    "Ref": "IsolatedSubnetB"
                                },
                                {
                                    "Ref": "IsolatedSubnetC"
                                }
                            ],
                            {
                                "Fn::If": [
                                    "BuildB",
                                    [
                                        {
                                            "Ref": "IsolatedSubnetA"
                                        },
                                        {
                                            "Ref": "IsolatedSubnetB"
                                        }
                                    ],
                                    [
                                        {
                                            "Ref": "IsolatedSubnetA"
                                        }
                                    ]
                                ]
                            }
                        ]
                    }
                ]
            }
        },
        "PrivateSubnets": {
            "Value": {
                "Fn::Join": [
                    ",",
                    {
                        "Fn::If": [
                            "BuildC",
                            [
                                {
                                    "Ref": "PrivateSubnetA"
                                },
                                {
                                    "Ref": "PrivateSubnetB"
                                },
                                {
                                    "Ref": "PrivateSubnetC"
                                }
                            ],
                            {
                                "Fn::If": [
                                    "BuildB",
                                    [
                                        {
                                            "Ref": "PrivateSubnetA"
                                        },
                                        {
                                            "Ref": "PrivateSubnetB"
                                        }
                                    ],
                                    [
                                        {
                                            "Ref": "PrivateSubnetA"
                                        }
                                    ]
                                ]
                            }
                        ]
                    }
                ]
            }
        },
        "PublicSubnets": {
            "Value": {
                "Fn::Join": [
                    ",",
                    {
                        "Fn::If": [
                            "BuildC",
                            [
                                {
                                    "Ref": "PublicSubnetA"
                                },
                                {
                                    "Ref": "PublicSubnetB"
                                },
                                {
                                    "Ref": "PublicSubnetC"
                                }
                            ],
                            {
                                "Fn::If": [
                                    "BuildB",
                                    [
                                        {
                                            "Ref": "PublicSubnetA"
                                        },
                                        {
                                            "Ref": "PublicSubnetB"
                                        }
                                    ],
                                    [
                                        {
                                            "Ref": "PublicSubnetA"
                                        }
                                    ]
                                ]
                            }
                        ]
                    }
                ]
            }
        },
        "VpcFlowLogsBucket": {
            "Value": {
                "Ref": "VpcFlowLogsBucket"
            },
            "Condition": "VpcFlowLogsDestinationS3"
        },
        "VpcFlowLogsCwLogGroup": {
            "Value": {
                "Ref": "VpcFlowLogsCwLogGroup"
            },
            "Condition": "VpcFlowLogsDestinationCloudWatchLogs"
        }
    }
}